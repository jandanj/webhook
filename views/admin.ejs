<!DOCTYPE html>
<html lang="zh-cn" xmlns:v-on="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Webhook-Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/amazeui/2.7.2/css/amazeui.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.min.js"></script>
    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.js"></script>-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.1/clipboard.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/amazeui/2.7.2/js/amazeui.min.js"></script>
    <script src="http://react.file.alimmdn.com/aes.js"></script>
    <link rel="stylesheet" href="/app.css">
    <script>
        //设置toastr
        toastr.options={
            timeOut:1000,
            positionClass: "toast-top-center",
            showEasing: "swing",
            progressBar: true
        }

        function getRandom() {
            return parseInt(Math.random()*10000);
        }

        var enKey='<?=enKey?>';
        function decrypt(word,key){
            var ckey = CryptoJS.enc.Utf8.parse(key);
            var decrypt = CryptoJS.AES.decrypt(word, ckey, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});
            return CryptoJS.enc.Utf8.stringify(decrypt).toString();
        }
        function encrypt(word,key){
            var ckey = CryptoJS.enc.Utf8.parse(key);
            var srcs = CryptoJS.enc.Utf8.parse(word);
            var encrypted = CryptoJS.AES.encrypt(srcs, ckey, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});
            return encrypted.toString();
        }

        var clipboard;
    </script>
</head>
<body>
    <div id="app">
        <h2 class="am-text-primary am-text-lg title">Projects</h2>
        <hr>
        <table class="am-table am-table-striped am-table-hover table-main">
            <thead>
            <tr>
                <th>name</th>
                <th>type</th>
                <th>path</th>
                <th>extra_commands(split with 'Enter')</th>
                <th>operations</th>
            </tr>
            </thead>
            <tbody>
            <tr v-for="(project,name) in config.projects">
                <td>{{name}}</td>
                <td>
                    <select v-model="project.type">
                        <option value="">null</option>
                        <option value="git">git</option>
                    </select>
                </td>
                <td><input type="text" v-model="project.path"></td>
                <td><textarea cols="30" rows="2" v-model="project.commands"></textarea></td>
                <td>
                    <div class="am-btn-toolbar">
                        <div class="am-btn-group am-btn-group-xs">
                            <button class="am-btn am-btn-default am-btn-xs am-text-secondary" @click="test(name)"><span class="am-icon-pencil-square-o"></span> test</button>
                            <button class="btn-copy am-btn am-btn-default am-btn-xs am-text-secondary am-hide-sm-only" @click="copy(name)" :data-clipboard-text="hostname+'/webhook/'+name"><span class="am-icon-copy"></span> copy</button>
                            <button class="am-btn am-btn-default am-btn-xs am-text-danger am-hide-sm-only" @click="del(name)"><span class="am-icon-trash-o"></span> delete</button>
                        </div>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
        <div class="am-u-md-12">
            <div class="am-btn-group am-fr">
                <button type="button" class="am-btn am-btn-default" @click="add"><span class="am-icon-plus"></span> Add</button>
            </div>
        </div>
        <div>
            <div class="am-btn-group container-save">
                <button type="button" class="am-btn am-btn-default btn btn-save" @click="save"><span class="am-icon-save"></span> Save</button>
                <button type="button" class="am-btn am-btn-default btn btn-setPassword" @click="setPassword"><span class="am-icon-lock"></span> Set password</button>
                <button type="button" class="am-btn am-btn-default btn btn-restart" @click="setPort"><span class="am-icon-pencil"></span> Set port</button>
                <button type="button" class="am-btn am-btn-default btn btn-restart" @click="restart"><span class="am-icon-refresh"></span> Restart</button>
            </div>
        </div>
    </div>
    <script>


        var vm=new Vue({
            el:"#app",
            data:{
                config:{
                    projects:null,
                    password:null,
                    port:null
                },
                hostname:''
            },
            methods:{
                del:function (name) {
                    console.log(name);
                    Vue.delete(this.config.projects,name);
                },
                test:function (name){
                    axios.get('/webhook/'+name+'?'+getRandom())
                        .then(function (res) {
                            res=res.data;
                            if (res.code==200){
                                toastr.success("Test ok");
                            } else{
                                toastr.info(res.msg);
                            }
                        });
                },
                add:function () {
                    var name='';
                    if (name=prompt("Please input project name")){
                        Vue.set(this.config.projects,name,{
                            path:"",
                            commands:""
                        });
                        return true;
                    }
                },
                setPassword:function(){
                    var password,repeat;
                    password = prompt('Please input new password');
                    if (!password){
                        return;
                    }
                    repeat = prompt('Please input again');
                    if (!repeat){
                        return;
                    }
                    if (password === repeat) {
                        this.config.password=password;
                        this.save();
                        this.restart();
                    }else {
                        toastr.info('Entered passwords differ!');
                    }
                },
                setPort:function(){
                    var port;
                    if (port=prompt('Please input new port')){
                        this.config.port=port;
                        this.save();
                        this.restart();
                    }
                },
                save:function () {
                    var data=encrypt(JSON.stringify(this.config,null,4),enKey);
                    axios.post('/api/setConfig',{data:data})
                        .then(function (res) {
                            res=res.data
                            if (res.code==200){
                                toastr.success("Save success");
                                setTimeout(function () {
                                    location.reload();
                                },1000);
                            } else {
                                toastr.info(res.msg);
                                setTimeout(function () {
                                    location.href = '/login';
                                },1000);
                            }
                        });
                },
                copy:function (project,name) {
                    if (clipboard){
                        clipboard.destroy();
                    }
                    clipboard=new ClipboardJS(".btn-copy");
                    clipboard.on('success',function () {
                        toastr.success('Copy success!');
                    });
                },
                restart:function () {
                    axios.get('/api/restart'+'?'+getRandom())
                        .then(function (res) {
                            res=res.data
                            if (res.code==200){
                                toastr.success("restart ok");
                                location.reload();
                            } else {
                                toastr.info(res.msg);
                            }
                        });
                }
            },
            created:function(){
                var that=this;
                axios.get('/api/getConfig'+'?'+getRandom())
                    .then(function (res) {
                        res=res.data;
                        if (res.code==200){
                            var data=res.data;
                            data=JSON.parse(decrypt(data,enKey));
                            for (i in data){
                                that.config[i]=data[i];
                            }
                        } else {
                            toastr.info(res.msg);
                            location.href='/login';
                        }
                    });
            },
            mounted:function () {
                this.hostname=location.origin;
            }
        });
    </script>
</body>
</html>